# complex read 1
MATCH p = (acc:Account {id:12})
    -[e1:transfer *1..3]
    ->(other:Account)<-[e2:signIn]-(medium)
WHERE
    isAsc(relationships(e1, 'timestamp'))=true
    AND head(relationships(e1, 'timestamp')) > 10
    AND last(relationships(e1, 'timestamp')) < 50
    AND e2.timestamp > 10
    AND e2.timestamp < 50
    AND medium.isBlocked = true
RETURN
    other.id as otherId,
    length(p)-1 as accountDistance,
    medium.id as mediumId,
    medium.type as mediumType
ORDER BY accountDistance, otherId;
[{"accountDistance":1,"mediumId":1,"mediumType":"Medium1","otherId":2},{"accountDistance":1,"mediumId":5,"mediumType":"Medium5","otherId":9},{"accountDistance":2,"mediumId":16,"mediumType":"Medium16","otherId":12}]


# complex read 2
MATCH (p:Person {id:12})-[e1:own]->(acc:Account)
    <-[e2:transfer*1..3]-(other:Account)
WHERE
    isDesc(relationships(e2, 'timestamp'))=true
    AND head(relationships(e2, 'timestamp')) < 50
    AND last(relationships(e2, 'timestamp')) > 10
WITH DISTINCT other
MATCH (other)<-[e3:deposit]-(loan:Loan)
WHERE
    e3.timestamp > 10
    AND e3.timestamp < 50
RETURN
    other.id AS otherId,
    sum(loan.loanAmount) as sumLoanAmount,
    sum(loan.balance) as sumLoanBalance
ORDER BY sumLoanBalance DESC;
[{"otherId":6,"sumLoanAmount":279.0,"sumLoanBalance":134.0},{"otherId":18,"sumLoanAmount":57.0,"sumLoanBalance":80.0},{"otherId":14,"sumLoanAmount":85.0,"sumLoanBalance":51.0},{"otherId":5,"sumLoanAmount":16.0,"sumLoanBalance":28.0},{"otherId":17,"sumLoanAmount":157.0,"sumLoanBalance":25.0},{"otherId":0,"sumLoanAmount":13.0,"sumLoanBalance":0.0}]


# complex read 3
MATCH (src:Account{id:2}), (dst:Account{id:3})
CALL algo.shortestPath(
    src,
    dst,
    {
        relationshipQuery:'transfer',
        edgeFilter: {
            timestamp: {
                smaller_than: 90,
                greater_than: 50
            }
        }
    }
)
YIELD nodeCount, totalCost, path
RETURN nodeCount - 1 AS len;
[{"len":7}]


# complex read 4
MATCH (src:Account {id:3})-[e1:transfer]->(dst:Account {id:8})
WHERE
    e1.timestamp > 10
    AND e1.timestamp < 100
WITH src, dst
MATCH (src)<-[e2:transfer]-(other:Account)<-[e3:transfer]-(dst)
WHERE
    e2.timestamp > 10
    AND e2.timestamp < 100
    AND e3.timestamp > 10
    AND e3.timestamp < 100
WITH DISTINCT src, other, dst
MATCH (src)<-[e2:transfer]-(other)
WHERE
    e2.timestamp > 10
    AND e2.timestamp < 100
WITH
    src, other, dst,
    count(e2) as numEdge2,
    sum(e2.amount) as sumEdge2Amount,
    max(e2.amount) as maxEdge2Amount
MATCH (other)<-[e3:transfer]-(dst)
WHERE
    e3.timestamp > 10
    AND e3.timestamp < 100
RETURN
    other.id as otherId,
    numEdge2,
    sumEdge2Amount,
    maxEdge2Amount,
    count(e3) as numEdge3,
    sum(e3.amount) as sumEdge3Amount,
    max(e3.amount) as maxEdge3Amount
ORDER BY sumEdge2Amount, sumEdge3Amount DESC;
[{"maxEdge2Amount":46.0,"maxEdge3Amount":94.0,"numEdge2":1,"numEdge3":2,"otherId":14,"sumEdge2Amount":46.0,"sumEdge3Amount":173.0}]


# complex read 5
MATCH (person:Person {id: 12})-[e1:own]->(src:Account)
WITH src
MATCH p=(src)-[e2:transfer*1..3]->(dst:Account)
WHERE
    isAsc(relationships(e2, 'timestamp'))=true
    AND head(relationships(e2, 'timestamp')) > 30
    AND last(relationships(e2, 'timestamp')) < 50
RETURN
    nodes(p, "id") as path,
    length(p) as len
ORDER BY len;
[{"len":1,"path":[0,9]},{"len":1,"path":[17,15]}]


# complex read 6
MATCH (dstCard:Account {id: 15} )<-[edge2:withdraw]-(mid:Account)
WHERE
    dstCard.type = 'tp2'
    AND edge2.timestamp > 10
    AND edge2.timestamp < 90
    AND edge2.amount > 12
WITH
    mid,
    sum(edge2.amount) as sumEdge2Amount,
    count(edge2.amount) as t
MATCH (mid)<-[edge1:transfer]-(src:Account)
WHERE
    edge1.timestamp > 10
    AND edge1.timestamp < 90
    AND edge1.amount > 11
RETURN
    mid.id,
    sum(edge1.amount) as sumEdge1Amount,
    sumEdge2Amount
ORDER BY sumEdge2Amount DESC;
[{"mid.id":3,"sumEdge1Amount":169.0,"sumEdge2Amount":83.0},{"mid.id":8,"sumEdge1Amount":324.0,"sumEdge2Amount":55.0}]


# complex read 7
MATCH (mid:Account {id:12}) WITH mid
OPTIONAL MATCH (mid)-[edge2]->(dst:Account)
WHERE
    label(edge2) IN ['transfer', 'withdraw']
    AND edge2.timestamp > 10
    AND edge2.timestamp < 90
    AND edge2.amount > 30
WITH mid,
    count(distinct dst) as numDst,
    sum(edge2.amount) as amountDst
OPTIONAL MATCH (mid)<-[edge1]-(src:Account)
WHERE
    label(edge1) IN ['transfer', 'withdraw']
    AND edge1.timestamp > 10
    AND edge1.timestamp < 90
    AND edge1.amount > 30
WITH
    count(distinct src) as numSrc,
    sum(edge1.amount) as amountSrc,
    numDst,
    amountDst
RETURN
    numSrc,
    numDst,
    CASE WHEN amountDst=0 THEN -1 ELSE 1.0 * amountSrc / amountDst END AS inOutRatio;
[{"inOutRatio":3.0516129032258066,"numDst":2,"numSrc":6}]


# tcr8

# loadProcedure tcr8 ../../test/resource/cases/finbench/cypher/procedure/tcr8.cpp read_only=true

CALL plugin.cpp.tcr8({
    id: 0,
    threshold: 0.1,
    startTime: 60,
    endTime: 90
});
[{"plugin.cpp.tcr8":[[[29,3],57],[[45,2],48],[[42,2],59],[[33,2],47],[[13,2],42],[[159,1],53],[[60,1],40],[[17,1],55],[[2,1],56]]}]


# complex read 9
OPTIONAL MATCH (mid:Account {id:12})-[edge2:repay]->(loan:Loan)-[edge1:deposit]->(mid_t:Account)
WHERE
    edge2.amount > 90
    AND edge2.timestamp > 10
    AND edge2.timestamp < 90
WITH
    sum(edge2.amount) AS edge2Amount
OPTIONAL MATCH (mid:Account {id:12})<-[edge1:deposit]-(loan:Loan)
WHERE
    edge1.amount > 90
    AND edge1.timestamp > 10
    AND edge1.timestamp < 90
WITH
    sum(edge1.amount) AS edge1Amount,
    edge2Amount
OPTIONAL MATCH (mid:Account {id: 12})-[edge4:transfer]->(down:Account)
WHERE
    edge4.timestamp > 10
    AND edge4.timestamp < 90
WITH
    edge1Amount,
    edge2Amount,
    sum(edge4.amount) AS edge4Amount
OPTIONAL MATCH (mid:Account {id: 12})<-[edge3:transfer]-(up:Account)
WHERE
    edge3.timestamp > 10
    AND edge3.timestamp < 90
WITH
    edge1Amount,
    edge2Amount,
    sum(edge3.amount) AS edge3Amount,
    edge4Amount
RETURN
    CASE WHEN edge2Amount=0 THEN -1 ELSE 1.0 * edge1Amount / edge2Amount END AS ratioRepay,
    CASE WHEN edge4Amount=0 THEN -1 ELSE 1.0 * edge1Amount / edge4Amount END AS ratioOut,
    CASE WHEN edge4Amount=0 THEN -1 ELSE 1.0 * edge3Amount / edge4Amount END AS ratioIn;
[{"ratioIn":2.529032258064516,"ratioOut":1.238709677419355,"ratioRepay":-1}]


# complex read 10
MATCH (p1:Person {id: 12})-[edge1:invest]->(m1:Company)
WHERE
    edge1.timestamp > 10
    AND edge1.timestamp < 90
WITH collect(distinct id(m1)) as m1_vids
MATCH (p2:Person {id: 16})-[edge2:invest]->(m2:Company)
WHERE
    edge2.timestamp > 10
    AND edge2.timestamp < 90
WITH collect(distinct id(m2)) as m2_vids, m1_vids
CALL algo.jaccard(m1_vids, m2_vids) YIELD similarity
RETURN similarity;
[{"similarity":0.2857142984867096}]


# complex read 11
MATCH
    (p1:Person {id:12})-[edge:guarantee*1..5]->(pN:Person)
    -[]->(loan:Loan)
WHERE
    minInList(relationships(edge, 'timestamp')) > 40
    AND maxInList(relationships(edge, 'timestamp')) < 50
WITH
    DISTINCT loan
RETURN
    sum(loan.loanAmount) as sumLoanAmount,
    count(distinct loan) as numLoans;
[{"numLoans":4,"sumLoanAmount":300.0}]


# complex read 12
MATCH
    (person:Person {id:12})-[edge1:own]->(pAcc:Account)
    -[edge2:transfer]->(compAcc:Account)
    <-[edge3:own]-(com:Company)
WHERE
    edge2.timestamp > 45
    AND edge2.timestamp < 50
RETURN
    com.id AS compAccountId,
    sum(edge2.amount) AS sumEdge2Amount
ORDER BY sumEdge2Amount DESC;
[{"compAccountId":16,"sumEdge2Amount":246.0},{"compAccountId":7,"sumEdge2Amount":164.0},{"compAccountId":10,"sumEdge2Amount":82.0},{"compAccountId":3,"sumEdge2Amount":82.0},{"compAccountId":8,"sumEdge2Amount":82.0},{"compAccountId":5,"sumEdge2Amount":82.0}]
